import os
from collections import deque, Counter
import pytchat
import json
import re
import random

class Assistant:
    def __init__(self):
        self.is_active = False
        self.keywords = set()
        self.message_history = []
        self.transcribed_words = []
        self.word_frequency = Counter()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
        self.commands = {
            "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": self.get_stats,
            "–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç": self.clear_chat,
            "–º—É—Ç": self.mute_user,
            "—Ä–∞–∑–º—É—Ç": self.unmute_user,
            "–±–∞–Ω": self.ban_user,
            "—Ä–∞–∑–±–∞–Ω": self.unban_user,
            "—Ä–µ–∂–∏–º —á–∞—Ç–∞": self.set_chat_mode,
            "–º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º": self.slow_mode,
            "—ç–º–æ–¥–∑–∏": self.toggle_emoji,
            "–ø–æ–¥–ø–∏—Å—á–∏–∫–∏": self.subscribers_only,
            "—Ñ–æ–ª–ª–æ–≤–µ—Ä—ã": self.followers_only,
            "—Ç–∞–π–º–µ—Ä": self.set_timer,
            "–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ": self.set_reminder,
            "–æ–ø—Ä–æ—Å": self.create_poll,
            "—Ä–æ–∑—ã–≥—Ä—ã—à": self.start_giveaway,
            "–∫–æ–º–∞–Ω–¥–∞": self.add_command,
            "—É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É": self.remove_command,
            "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä": self.add_moderator,
            "—Å–Ω—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞": self.remove_moderator,
            "–ø–æ–º–æ—â—å": self.show_help
        }
        self.muted_users = set()
        self.banned_users = set()
        self.chat_mode = "normal"
        self.slow_mode_delay = 0
        self.emoji_enabled = True
        self.custom_commands = {}
        self.moderators = set()
        self.active_polls = {}
        self.active_giveaways = {}
        self.timers = {}
        self.reminders = {}

    def activate(self):
        self.active = True
        return "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å!"

    def deactivate(self):
        self.active = False
        return "–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."

    def process_message(self, message, author):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.active:
            return None

        self.message_history.append({"author": author, "text": message})
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for keyword in self.keywords:
            if keyword.lower() in message.lower():
                self.alerts.append(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")

        # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–∞—Ç–∞
        if self._is_negative_message(message):
            return self._generate_mood_improvement_response()

        # –û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç—Ä–∏–º–µ—Ä–∞
        if author == "streamer":
            return self._process_streamer_command(message)

        return None

    def add_keywords(self, keywords):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        self.keywords.update(keywords)

    def get_alerts(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        alerts = self.alerts.copy()
        self.alerts = []
        return alerts

    def analyze_chat_mood(self):
        """–ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —á–∞—Ç–∞"""
        if not self.message_history:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"

        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        positive = 0
        negative = 0
        for msg in self.message_history:
            if self._is_positive_message(msg['text']):
                positive += 1
            elif self._is_negative_message(msg['text']):
                negative += 1

        total = len(self.message_history)
        mood = (positive - negative) / total if total > 0 else 0

        if mood > 0.2:
            return "–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —á–∞—Ç–µ"
        elif mood < -0.2:
            return "–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —á–∞—Ç–µ"
        return "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ —á–∞—Ç–µ"

    def _is_positive_message(self, message):
        positive_words = {'–∫—Ä—É—Ç–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', 'üëç', '‚ù§Ô∏è'}
        return any(word in message.lower() for word in positive_words)

    def _is_negative_message(self, message):
        negative_words = {'–ø–ª–æ—Ö–æ', '—É–∂–∞—Å', '–æ—Ç—Å—Ç–æ–π', '—Ñ—É', '–±–∞–Ω', 'üëé'}
        return any(word in message.lower() for word in negative_words)

    def _generate_mood_improvement_response(self):
        responses = [
            "–î–∞–≤–∞–π—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π!",
            "–ü—Ä–µ–¥–ª–∞–≥–∞—é –æ–±—Å—É–¥–∏—Ç—å —ç—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–æ",
            "–ü–æ–º–Ω–∏—Ç–µ –æ –ø—Ä–∞–≤–∏–ª–∞—Ö —á–∞—Ç–∞ –∏ –≤–∑–∞–∏–º–æ—É–≤–∞–∂–µ–Ω–∏–∏"
        ]
        return random.choice(responses)

    def _process_streamer_command(self, command_text):
        command_text = command_text.lower().strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
        for cmd, func in self.commands.items():
            if command_text.startswith(cmd):
                args = command_text[len(cmd):].strip()
                return func(args) if args else func()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if command_text in self.custom_commands:
            return self.custom_commands[command_text]
        
        return "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."

    def get_stats(self):
        return f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞:\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(self.moderators)}\n–ó–∞–º—É—á–µ–Ω–Ω—ã—Ö: {len(self.muted_users)}\n–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö: {len(self.banned_users)}"

    def clear_chat(self):
        return "–ß–∞—Ç –æ—á–∏—â–µ–Ω"

    def mute_user(self, username):
        if not username:
            return "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        self.muted_users.add(username)
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–º—É—á–µ–Ω"

    def unmute_user(self, username):
        if not username:
            return "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        self.muted_users.discard(username)
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Ä–∞–∑–º—É—á–µ–Ω"

    def ban_user(self, username):
        if not username:
            return "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        self.banned_users.add(username)
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –∑–∞–±–∞–Ω–µ–Ω"

    def unban_user(self, username):
        if not username:
            return "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        self.banned_users.discard(username)
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Ä–∞–∑–±–∞–Ω–µ–Ω"

    def set_chat_mode(self, mode):
        valid_modes = ["normal", "subscribers", "followers", "emote"]
        if mode not in valid_modes:
            return f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã: {', '.join(valid_modes)}"
        self.chat_mode = mode
        return f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–∂–∏–º —á–∞—Ç–∞: {mode}"

    def slow_mode(self, seconds=None):
        if not seconds:
            return "–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω"
        try:
            self.slow_mode_delay = int(seconds)
            return f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º: {seconds} —Å–µ–∫—É–Ω–¥"
        except ValueError:
            return "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö"

    def toggle_emoji(self):
        self.emoji_enabled = not self.emoji_enabled
        return f"–≠–º–æ–¥–∑–∏ {'–≤–∫–ª—é—á–µ–Ω—ã' if self.emoji_enabled else '–≤—ã–∫–ª—é—á–µ–Ω—ã'}"

    def subscribers_only(self):
        self.chat_mode = "subscribers"
        return "–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"

    def followers_only(self):
        self.chat_mode = "followers"
        return "–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —Ñ–æ–ª–ª–æ–≤–µ—Ä–æ–≤"

    def set_timer(self, args):
        try:
            name, duration = args.split(maxsplit=1)
            duration = int(duration)
            self.timers[name] = duration
            return f"–¢–∞–π–º–µ—Ä {name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥"
        except:
            return "–§–æ—Ä–º–∞—Ç: —Ç–∞–π–º–µ—Ä [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Å–µ–∫—É–Ω–¥—ã]"

    def set_reminder(self, message):
        if not message:
            return "–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
        reminder_id = len(self.reminders) + 1
        self.reminders[reminder_id] = message
        return f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ #{reminder_id} —Å–æ–∑–¥–∞–Ω–æ: {message}"

    def create_poll(self, args):
        try:
            question, *options = args.split('|')
            poll_id = len(self.active_polls) + 1
            self.active_polls[poll_id] = {
                'question': question.strip(),
                'options': [opt.strip() for opt in options],
                'votes': {opt.strip(): 0 for opt in options}
            }
            return f"–û–ø—Ä–æ—Å #{poll_id} —Å–æ–∑–¥–∞–Ω: {question}"
        except:
            return "–§–æ—Ä–º–∞—Ç: –æ–ø—Ä–æ—Å –í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç 1 | –í–∞—Ä–∏–∞–Ω—Ç 2 | ..."

    def start_giveaway(self, prize):
        if not prize:
            return "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–∑"
        giveaway_id = len(self.active_giveaways) + 1
        self.active_giveaways[giveaway_id] = {
            'prize': prize,
            'participants': set()
        }
        return f"–†–æ–∑—ã–≥—Ä—ã—à #{giveaway_id} –Ω–∞—á–∞—Ç: {prize}"

    def add_command(self, args):
        try:
            name, response = args.split(maxsplit=1)
            self.custom_commands[name.lower()] = response
            return f"–ö–æ–º–∞–Ω–¥–∞ !{name} –¥–æ–±–∞–≤–ª–µ–Ω–∞"
        except:
            return "–§–æ—Ä–º–∞—Ç: –∫–æ–º–∞–Ω–¥–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ] [–æ—Ç–≤–µ—Ç]"

    def remove_command(self, name):
        if not name:
            return "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"
        name = name.lower()
        if name in self.custom_commands:
            del self.custom_commands[name]
            return f"–ö–æ–º–∞–Ω–¥–∞ !{name} —É–¥–∞–ª–µ–Ω–∞"
        return "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

    def add_moderator(self, username):
        if not username:
            return "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        self.moderators.add(username)
        return f"{username} –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"

    def remove_moderator(self, username):
        if not username:
            return "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        self.moderators.discard(username)
        return f"{username} –±–æ–ª—å—à–µ –Ω–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä"

    def show_help(self):
        commands_list = "\n".join([f"‚Ä¢ {cmd}" for cmd in self.commands.keys()])
        return f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n{commands_list}"

    def process_command(self, command, username):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç —Å—Ç—Ä–∏–º–µ—Ä–∞"""
        command = command.lower().strip()
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if command == "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            return self.get_stats()
        elif command.startswith("–º—É—Ç"):
            user = command.replace("–º—É—Ç", "").strip()
            return self.mute_user(user)
        elif command.startswith("–±–∞–Ω"):
            user = command.replace("–±–∞–Ω", "").strip()
            return self.ban_user(user)
        elif command == "–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç":
            return self.clear_chat()
        elif command == "–ø–æ–º–æ—â—å":
            return self.show_help()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
        if command in self.custom_commands:
            return self.custom_commands[command]
        
        return "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."

    def process_audio_transcript(self, transcript):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        words = transcript.lower().split()
        self.transcribed_words.extend(words)
        self.word_frequency.update(words)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—É —Å–ª–æ–≤
        common_words = self.word_frequency.most_common(10)
        return {
            "common_words": common_words,
            "total_words": len(self.transcribed_words)
        }

    def get_word_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–ª–æ–≤–∞–º"""
        return {
            "total_words": len(self.transcribed_words),
            "unique_words": len(self.word_frequency),
            "common_words": self.word_frequency.most_common(10)
        }
